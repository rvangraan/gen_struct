-module(gen_struct_transform_tests).
%%--------------------------------------------------------------------------------------------------
-include_lib("eunit/include/eunit.hrl").
%%--------------------------------------------------------------------------------------------------
-define(STRUCT1_AST,
[{attribute,1,file,
     {"/home/shomodj/workspace/osw/core/lib/gen_struct/test/test_struct1.erl",
      1}},
 {attribute,2,module,test_struct1},
 {attribute,4,export,[{fun1,1}]},
 {attribute,1,file,
     {"/home/shomodj/workspace/osw/core/lib/gen_struct/include/gen_struct.hrl",
      1}},
 {attribute,2,compile,[]},
 {attribute,1,file,
     {"/home/shomodj/workspace/osw/core/lib/gen_struct/include/gen_struct_export.hrl",
      1}},
 {attribute,2,export,
     [{'=field',1},
      {'=fields',0},
      {'=fields_num',0},
      {'=record',0},
      {'=pk',0},
      {new,0},
      {new,1},
      {new_from_list,1},
      {new_from_tuple,1},
      {fset,2},
      {fset,3},
      {fget,2},
      {fget,3}]},
 {attribute,5,file,
     {"/home/shomodj/workspace/osw/core/lib/gen_struct/include/gen_struct.hrl",
      5}},
 {attribute,-5,file,{[],5}},
 {function,9,new,0,
     [{clause,9,[],[],
          [{call,10,
               {atom,10,init},
               [{call,10,
                    {remote,10,{atom,10,gen_struct},{atom,10,new}},
                    [{atom,10,test_struct1}]}]}]}]},
 {function,14,new,1,
     [{clause,14,
          [{var,14,'Proplist'}],
          [],
          [{call,15,
               {atom,15,init},
               [{call,15,
                    {remote,15,{atom,15,gen_struct},{atom,15,new}},
                    [{atom,15,test_struct1},{var,15,'Proplist'}]}]}]}]},
 {function,19,new_from_list,1,
     [{clause,19,
          [{var,19,'Proplist'}],
          [],
          [{call,20,
               {atom,20,init},
               [{call,20,
                    {remote,20,{atom,20,gen_struct},{atom,20,new_from_list}},
                    [{atom,20,test_struct1},{var,20,'Proplist'}]}]}]}]},
 {function,24,new_from_tuple,1,
     [{clause,24,
          [{var,24,'List'}],
          [],
          [{call,25,
               {atom,25,init},
               [{call,25,
                    {remote,25,{atom,25,gen_struct},{atom,25,new_from_tuple}},
                    [{atom,25,test_struct1},{var,25,'List'}]}]}]}]},
 {function,29,fset,3,
     [{clause,29,
          [{var,29,'Field'},{var,29,'Value'},{var,29,'Struct'}],
          [],
          [{call,30,
               {remote,30,{atom,30,gen_struct},{atom,30,fset}},
               [{atom,30,test_struct1},
                {var,30,'Struct'},
                {var,30,'Field'},
                {var,30,'Value'}]}]}]},
 {function,34,fset,2,
     [{clause,34,
          [{var,34,'Proplist'},{var,34,'Struct'}],
          [],
          [{call,35,
               {remote,35,{atom,35,gen_struct},{atom,35,fset}},
               [{atom,35,test_struct1},
                {var,35,'Struct'},
                {var,35,'Proplist'}]}]}]},
 {function,39,fget,2,
     [{clause,39,
          [{var,39,'Field'},{var,39,'Struct'}],
          [],
          [{call,40,
               {remote,40,{atom,40,gen_struct},{atom,40,fget}},
               [{atom,40,test_struct1},
                {var,40,'Struct'},
                {var,40,'Field'}]}]}]},
 {function,44,fget,3,
     [{clause,44,
          [{var,44,'Field'},{var,44,'DefVal'},{var,44,'Struct'}],
          [],
          [{call,45,
               {remote,45,{atom,45,gen_struct},{atom,45,fget}},
               [{atom,45,test_struct1},
                {var,45,'Struct'},
                {var,45,'Field'},
                {var,45,'DefVal'}]}]}]},
 {attribute,7,file,
     {"/home/shomodj/workspace/osw/core/lib/gen_struct/test/test_struct1.erl",
      7}},
 {attribute,8,record,
     {test_struct1,
         [{record_field,9,{atom,9,field1},{integer,9,1}},
          {record_field,10,{atom,10,field2},{atom,10,undefined}},
          {record_field,11,{atom,11,field3},{float,11,11.11}},
          {record_field,12,
              {atom,12,field4},
              {bin,12,[{bin_element,12,{string,12,"12345"},default,default}]}},
          {record_field,13,
              {atom,13,field5},
              {tuple,13,
                  [{integer,13,1},
                   {integer,13,2},
                   {integer,13,3},
                   {integer,13,4},
                   {integer,13,5}]}},
          {record_field,14,
              {atom,14,field6},
              {cons,14,
                  {integer,14,1},
                  {cons,14,
                      {integer,14,2},
                      {cons,14,
                          {integer,14,3},
                          {cons,14,
                              {integer,14,4},
                              {cons,14,{integer,14,5},{nil,14}}}}}}},
          {record_field,15,{atom,15,field7},{string,15,"12345"}},
          {record_field,16,
              {atom,16,field8},
              {tuple,16,
                  [{atom,16,test_record},
                   {integer,16,1},
                   {integer,16,2},
                   {integer,16,3},
                   {integer,16,4},
                   {integer,16,5}]}}]}},
 {function,19,'=pk',0,[{clause,19,[],[],[{atom,19,field1}]}]},
 {function,24,fun1,1,[{clause,24,[{var,24,'_S'}],[],[{atom,24,ok}]}]},
 {eof,25}]
).

%%--------------------------------------------------------------------------------------------------

struct1_test() ->
  AST = gen_struct_transform:parse_transform(?STRUCT1_AST, []),
  EOF = hd(lists:reverse(AST)),
  ?assertEqual({eof, 34}, EOF).

%%--------------------------------------------------------------------------------------------------  